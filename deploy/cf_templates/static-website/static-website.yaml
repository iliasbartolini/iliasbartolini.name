---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website: combining S3, CloudFront and Route53, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentZoneStack
    - Label:
        default: 'DNS Parameters'
      Parameters:
      - DomainName
      - HostedZoneId
    - Label:
        default: 'SSL/TLS Parameters'
      Parameters:
      - CertificateType
      - ExistingCertificate
Parameters:
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
  DomainName:
    Description: 'The primary domain name of the static website (e.g. widdix.de).'
    Type: String
  CertificateType:
    Description: 'Indicates whether to use the certificate from the AWS Certificate Manager or AWS Identity and Access Management. CreateAcmCertificate only works in the us-east-1 region.'
    Type: String
    Default: IamCertificateId
    AllowedValues:
    - AcmCertificateArn
    - IamCertificateId
    - CreateAcmCertificate
  ExistingCertificate:
    Description: 'Optional ACM Certificate ARN or IAM Certificate ID. Must be created in the us-east-1 region!'
    Type: String
    Default: ''
  HostedZoneId:
    Description: 'Deprecated in v7, will be removed in v8, use ParentZoneStack instead! The Id of the hosted zone managed by AWS Route53.'
    Type: String
    Default: ''
Conditions:
  HasAcmCertificateArn: !Equals [!Ref CertificateType, 'AcmCertificateArn']
  HasIamCertificateId: !Equals [!Ref CertificateType, 'IamCertificateId']
  HasCreateAcmCertificate: !Equals [!Ref CertificateType, 'CreateAcmCertificate']
Resources:
  Certificate:
    Condition: HasCreateAcmCertificate
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
      - DomainName: !Ref DomainName
        ValidationDomain: !Ref DomainName
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: 'index.html'
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Action:
          - 's3:GetObject'
          Effect: Allow
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Principal: '*'
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref DomainName
        Comment: !Ref DomainName
        Origins:
        - DomainName: !Select [2, !Split ['/', !GetAtt 'S3Bucket.WebsiteURL']]
          Id: s3origin
          CustomOriginConfig:
            OriginProtocolPolicy: 'http-only'
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !If [HasCreateAcmCertificate, !Ref Certificate, !If [HasAcmCertificateArn, !Ref ExistingCertificate, !Ref 'AWS::NoValue']]
          IamCertificateId: !If [HasIamCertificateId, !Ref ExistingCertificate, !Ref 'AWS::NoValue']
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: TLSv1
  Route53RecordV2:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'static-website/static-website'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '6.18.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  URL:
    Description: 'URL to static website.'
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
